import bpy
import requests
import io
import os
import tempfile
import pip
pip.main(['install', 'requests-toolbelt', '--user'])
from requests_toolbelt import MultipartEncoder


# DB_SERVER_ADDRESS = "http://127.0.0.1:8000"
# IPFS_ADDRESS = "http://10.252.107.31:5001"

class ServerStatusPanel(bpy.types.Panel):
    bl_idname = "OBJECT_PT_server_status_panel_custom"
    bl_label = "Server Uploader"
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_context = "object"
    
    
    def draw(self, context):
        layout = self.layout


        # Server address row
        row = layout.row()
        row.label(text="Server Address:")
        row.prop(context.scene, "server_address", text="")
        
        row = layout.row()        
        row.label(text="IPFS Address:")
        row.prop(context.scene, "ipfs_address", text="")

        # Sever Status indicator row
        row = layout.row()
        row.label(text="Server Status:")
        status_label = row.column(align=True)
        status_label.enabled = False
        status_label.operator("object.check_server", text=context.scene.server_status_label, icon='QUESTION')


        # IPFS Status indicator row
        row = layout.row()
        row.label(text="IPFS Status:")
        status_label = row.column(align=True)
        status_label.enabled = False
        status_label.operator("object.check_server", text=context.scene.ipfs_status_label, icon='QUESTION')

        # Check server button
        row = layout.row()
        row.operator("object.check_server", text="Check Server Status")
              
        # Selected Object display
        obj = context.object
        row = layout.row()
        row.label(text="Active object is: " + obj.name)
        
        
        # Display Content Address
        row = layout.row()
        row.label(text="Content Address:")
        content_address = row.column(align=True)
        content_address.enabled = False
        content_address.operator("object.ipfs_upload", text=context.scene.content_address)
  
        # Upload to IPFS button
        row = layout.row()
        row.operator("object.ipfs_upload", text="Upload obj to IPFS")
        
        # Copy IPFS hash button
        ipfs_hash = context.scene.content_address
        if ipfs_hash:
            row = layout.row()
            row.operator("object.copy_ipfs_hash", text="Copy IPFS Hash", icon='COPYDOWN').ipfs_hash = ipfs_hash
              
  
        # Email row
        row = layout.row()
        row.label(text="Email:")
        row.prop(context.scene, "server_email", text="")

        # Name row
        row = layout.row()
        row.label(text="Name:")
        row.prop(context.scene, "server_name", text="")

        # Tag row
        row = layout.row()
        row.label(text="Tag:")
        row.prop(context.scene, "server_tag", text="")
        
        # Upload server button
        row = layout.row()
        row.operator("object.server_upload", text="Upload")


class OBJECT_OT_CheckServerOperator(bpy.types.Operator):
    bl_idname = "object.check_server"
    bl_label = "Check Server"

    def execute(self, context):
        server_address = context.scene.server_address
        ipfs_address = context.scene.ipfs_address

        # Perform server availability check using an HTTP GET request
        is_server_available = self.check_server_availability(server_address)
        is_ipfs_available = self.check_ipfs_availability(ipfs_address)

        if is_server_available:
            context.scene.server_status_label = "Connected"
        else:
            context.scene.server_status_label = "Disconnected"
            
        if is_ipfs_available:
            context.scene.ipfs_status_label = "Connected"
        else:
            context.scene.ipfs_status_label = "Disconnected"


        return {'FINISHED'}
    
    def check_server_availability(self, server_address):
        try:
            # Send an HTTP GET request to the server
            response = requests.get(server_address)

            # Check the response status code
            return response.status_code == 200
        except requests.exceptions.RequestException:
            # An error occurred during the request
            return False
        
    def check_ipfs_availability(self, ipfs_address):
        try:
            # Send an HTTP POST request to the IPFS
            response = requests.post(f"{ipfs_address}/api/v0/version")

            # Check the response status code
            return response.status_code == 200
        except requests.exceptions.RequestException:
            # An error occurred during the request
            return False
        
class OBJECT_OT_IPFSUploadOperator(bpy.types.Operator):
    bl_idname = "object.ipfs_upload"
    bl_label = "IPFS Upload"

    def execute(self, context):
        ipfs_address = context.scene.ipfs_address

        # Check if the active object is a mesh object
        if bpy.context.active_object.type == 'MESH':
            
            obj = context.object
            temp_dir = tempfile.mkdtemp()
            filepath = os.path.join(temp_dir, obj.name + ".obj")
            bpy.ops.export_mesh.stl(filepath=filepath, use_selection=True)

            # Read the obj file data into a byte array
            with open(filepath, "rb") as file:
                blob = file.read()                        
            
            # Perform the file upload to IPFS
            ipfs_hash = self.upload_to_ipfs(ipfs_address, obj.name + ".obj", filepath)
            if ipfs_hash:
                context.scene.content_address = f"{ipfs_hash}"
            else:
                context.scene.content_address = "Failed to upload OBJ to IPFS"

        else:
            context.scene.content_address = "No valid OBJ file associated with the active object"

        return {'FINISHED'}

    def upload_to_ipfs(self, ipfs_address, filename, file_path):
        try:
            files = {'file': open(file_path, 'rb')}
            params = {'wrap-with-directory': 'true'}
            
            response = requests.post(f"{ipfs_address}/api/v0/add",
                files=files,
            )     

            # Check the response status code
            if response.status_code == 200:
                # Extract the IPFS hash from the response JSON
                ipfs_hash = response.json().get('Hash')
                return ipfs_hash
            else:
                print(response.text)

        except requests.exceptions.RequestException:
            # An error occurred during the request
            return None

class OBJECT_OT_CopyIPFSHashOperator(bpy.types.Operator):
    bl_idname = "object.copy_ipfs_hash"
    bl_label = "Copy IPFS Hash"

    ipfs_hash: bpy.props.StringProperty()

    def execute(self, context):
        bpy.context.window_manager.clipboard = self.ipfs_hash
        self.report({'INFO'}, "IPFS Hash copied to clipboard")
        return {'FINISHED'}

class OBJECT_OT_ServerUploadOperator(bpy.types.Operator):
    bl_idname = "object.server_upload"
    bl_label = "Upload"

    def execute(self, context):
        # Replace uploading IPFS and db server

        return {'FINISHED'}

    def check_server_availability(self, server_address):
        # Replace this with your own server availability check logic
        # Return True if server is available, False otherwise
        # You can use libraries like requests or urllib to perform the check
        # Example:
        # import requests
        # try:
        #     response = requests.get(server_address)
        #     return response.status_code == 200
        # except requests.exceptions.RequestException:
        #     return False
        pass
    

classes = (
    ServerStatusPanel,
    OBJECT_OT_CheckServerOperator,
    OBJECT_OT_IPFSUploadOperator,
    OBJECT_OT_CopyIPFSHashOperator,
    OBJECT_OT_ServerUploadOperator,
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

    bpy.types.Scene.server_address = bpy.props.StringProperty(name="Server Address")
    bpy.types.Scene.ipfs_address = bpy.props.StringProperty(name="IPFS Address")
    
    bpy.types.Scene.server_status_label = bpy.props.StringProperty(name="Server Status Label")
    bpy.types.Scene.ipfs_status_label = bpy.props.StringProperty(name="IPFS Status Label")
    
    bpy.types.Scene.content_address = bpy.props.StringProperty(name="Content Address")

    bpy.types.Scene.server_email = bpy.props.StringProperty(name="Email", subtype='FILE_NAME')
    bpy.types.Scene.server_name = bpy.props.StringProperty(name="Name", subtype='FILE_NAME')
    bpy.types.Scene.server_tag = bpy.props.StringProperty(name="Tag", subtype='FILE_NAME')

def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)

    del bpy.types.Scene.server_address
    del bpy.types.Scene.server_status_label

if __name__ == "__main__":
    register()
